<script>
	function check_valid() {
		var labels = ['<%= all_labels -%>'] ;
		var valid = true;
		var invalid = "";

		$("input[type=radio]").removeClass('invalid'); // clear errors first

		//check if any input groups are not checked
		for (var i = 0; i < labels.length; i++) {
			var selector = 'input[data-tag=' + labels[i] + ']';

			if (!($(selector).is(':checked'))) {
				valid = false;
				invalid += " " + labels[i];
				$("#" + labels[i]).addClass('invalid');
				window.scrollTo(0, 0);
			}
		}

		if ($("#qualification_match_number").val() == "") {
			valid = false;
			$("#qualification_match_number").addClass('invalid');
			window.scrollTo(0, $("#qualification_match_number").position().top);
		}
		if ($("#qualification_table_number").val() == "") {
			valid = false;
			$("#qualification_table_number").addClass('invalid');
			window.scrollTo(0, $("#qualification_table_number").position().top);
		}

		if (!valid) {
			BootstrapDialog.alert({
									title: 'ERRORS!',
									message: "Make a selection for all items!",
									type: BootstrapDialog.TYPE_DANGER // <-- Default value is BootstrapDialog.TYPE_PRIMARY
							});
		} else {
			var special = special_validation();
			if (special != "") {
				//alert(special);
				BootstrapDialog.alert({
				            title: 'ERRORS!',
				            message: special,
				            type: BootstrapDialog.TYPE_DANGER // <-- Default value is BootstrapDialog.TYPE_PRIMARY
				            // callback: function(result) {
				            //     // result will be true if button was click, while it will be false if users close the dialog directly.
				            //     alert('Result is: ' + result);
				            // }
				        });
				valid = false;
			}
		}

		return valid;
	}

	function special_validation() {

		var totalUnits = (input_value('unit_supported_by_tree_large_branch') +
						  input_value('unit_supported_by_tree_small_branch') +
						  input_value('independent_and_supported'));
		if (totalUnits > 16) {
			make_all_invalid(['unit_supported_by_tree_large_branch', 'unit_supported_by_tree_small_branch', 'independent_and_supported']);
			return "Total number of Units must be less than 16!";
		}

		if (input_value('blue_car_down') == 1 && input_value('balanced') == 1) {
			make_all_invalid(['blue_car_down', 'balanced']);
			return "Either Blue Car is Down or Elevator is Balanced!";
		}

		if (input_value('completely_in_circle') == 1 && input_value('partly_in_circle') == 1) {
			make_all_invalid(['completely_in_circle', 'partly_in_circle']);
			return "Team Structure can either be Completely or Partly in any circle";
		}

		return "";
	}

	function input_value(tag) {
		return parseInt($('input:checked[data-tag=' + tag + ']').val());
	}

	function input_text(tag) {
		return $('input:checked[data-tag=' + tag + ']').val();
	}

	function make_invalid(tag) {
		$('#' + tag).addClass('invalid');
	}

	function make_all_invalid(fields) {
		fields.map(a => $('#' + a).addClass('invalid'));

		// for (var i = 0; i < arguments.length; i++) {
		// 	$('#' + arguments[i]).addClass('invalid');
		// }
		window.scrollTo(0, $("#" + arguments[0]).position().top);
	}


	$(document).ready(function () {
		$("input[type=radio]").on('change', function (evt, myName) {
			var tag = $(evt.currentTarget).data('tag');
			$('#' + tag).removeClass('invalid');
			$("input[type=submit]").removeAttr('disabled');
		});

		$("input[type=text]").on('change', function (evt, element) {
			$(evt.currentTarget).removeClass('invalid');
			$("input[type=submit]").removeAttr('disabled');
		});
	});

</script>
